align_metric               : mcs
batch_size                 : 128
dataset                    : aids700nef
dataset_dzh                : dataset1_BA_200
dataset_version            : None
debug                      : False
device                     : cpu
dos_pred                   : sim
dos_true                   : dist
draw_sub_graph             : False
ds_kernel                  : exp
ds_norm                    : True
edge_feats                 : None
filter_large_size          : None
hard_mask                  : True
hostname                   : 10a106e359df
layer_1                    : NodeEmbedding:type=gin,output_dim=64,act=relu,bn=True
layer_2                    : NodeEmbedding:type=gin,input_dim=64,output_dim=64,act=relu,bn=True
layer_3                    : NodeEmbedding:type=gin,input_dim=64,output_dim=64,act=relu,bn=True
layer_4                    : Diff_Pooling:pool_type=topk,ratio=3
layer_5                    : GMNPropagator:input_dim=64,output_dim=64,distance_metric=cosine,more_nn=None
layer_6                    : GMNPropagator:input_dim=64,output_dim=64,distance_metric=cosine,more_nn=None
layer_7                    : GMNPropagator:input_dim=64,output_dim=64,distance_metric=cosine,more_nn=None
layer_8                    : GMNAggregator:input_dim=64,output_dim=64
layer_9                    : GMNLoss:ds_metric=cosine
layer_num                  : 9
load_model                 : None
lr                         : 0.001
model                      : CoSim-TopKPool
model_name                 : fancy
n_outputs                  : 10
no_probability             : False
node_fe_1                  : one_hot
node_feats                 : type
node_ordering              : bfs
num_epochs                 : None
num_iters                  : 5000
num_node_feat              : 30
num_partitions             : 3
num_select                 : 3
only_iters_for_debug       : None
positional_encoding        : False
print_every_iters          : 10
rank                       : True
save_every_epochs          : 1
save_model                 : True
save_sub_graph             : False
select_node_pair           : None
sub_graph_path             : ../../sub_graph/
theta                      : 0.5
throw_away                 : 0
traditional_method         : True
train_test_ratio           : 0.8
tvt_options                : all
tvt_strategy               : holdout
user                       : root
validation                 : False
ts                         : 2020-06-04T00-39-02.730074

python /graph/part531/GraphMatching_submission/model/OurGED/main.py --align_metric=mcs  --batch_size=128  --dataset=aids700nef  --dataset_dzh=dataset1_BA_200  --dataset_version=None  --debug=False  --device=cpu  --dos_pred=sim  --dos_true=dist  --draw_sub_graph=False  --ds_kernel=exp  --ds_norm=True  --edge_feats=None  --filter_large_size=None  --hard_mask=True  --hostname=10a106e359df  --layer_1=NodeEmbedding:type=gin,output_dim=64,act=relu,bn=True  --layer_2=NodeEmbedding:type=gin,input_dim=64,output_dim=64,act=relu,bn=True  --layer_3=NodeEmbedding:type=gin,input_dim=64,output_dim=64,act=relu,bn=True  --layer_4=Diff_Pooling:pool_type=topk,ratio=3  --layer_5=GMNPropagator:input_dim=64,output_dim=64,distance_metric=cosine,more_nn=None  --layer_6=GMNPropagator:input_dim=64,output_dim=64,distance_metric=cosine,more_nn=None  --layer_7=GMNPropagator:input_dim=64,output_dim=64,distance_metric=cosine,more_nn=None  --layer_8=GMNAggregator:input_dim=64,output_dim=64  --layer_9=GMNLoss:ds_metric=cosine  --layer_num=9  --load_model=None  --lr=0.001  --model=CoSim-TopKPool  --model_name=fancy  --n_outputs=10  --no_probability=False  --node_fe_1=one_hot  --node_feats=type  --node_ordering=bfs  --num_epochs=None  --num_iters=5000  --num_node_feat=30  --num_partitions=3  --num_select=3  --only_iters_for_debug=None  --positional_encoding=False  --print_every_iters=10  --rank=True  --save_every_epochs=1  --save_model=True  --save_sub_graph=False  --select_node_pair=None  --sub_graph_path=../../sub_graph/  --theta=0.5  --throw_away=0  --traditional_method=True  --train_test_ratio=0.8  --tvt_options=all  --tvt_strategy=holdout  --user=root  --validation=False

Model(
  (layers): ModuleList(
    (0): NodeEmbedding(
      (conv): GINConv(nn=Sequential(
        (0): Linear(in_features=30, out_features=64, bias=True)
        (1): ReLU()
        (2): Linear(in_features=64, out_features=64, bias=True)
      ))
      (act): ReLU()
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): NodeEmbedding(
      (conv): GINConv(nn=Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): ReLU()
        (2): Linear(in_features=64, out_features=64, bias=True)
      ))
      (act): ReLU()
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (2): NodeEmbedding(
      (conv): GINConv(nn=Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): ReLU()
        (2): Linear(in_features=64, out_features=64, bias=True)
      ))
      (act): ReLU()
      (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (3): Diff_Pooling_Layer(
      (pool): TopKPooling(64, ratio=0.3333333333333333)
    )
    (4): GMNPropagator(
      (distance_metric): CosineSimilarity()
      (softmax): Softmax()
      (f_messasge): MLP(
        (activation): ReLU()
        (layers): ModuleList(
          (0): Linear(in_features=128, out_features=128, bias=True)
          (1): Linear(in_features=128, out_features=128, bias=True)
        )
      )
      (f_node): MLP(
        (activation): ReLU()
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=64, bias=True)
        )
      )
      (GAT_1): GATConv(64, 64, heads=1)
      (relu): ReLU()
      (bn_1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (GAT_2): GATConv(64, 64, heads=1)
      (bn_2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (dense_GCN): DenseSAGEConv(64, 64)
    )
    (5): GMNPropagator(
      (distance_metric): CosineSimilarity()
      (softmax): Softmax()
      (f_messasge): MLP(
        (activation): ReLU()
        (layers): ModuleList(
          (0): Linear(in_features=128, out_features=128, bias=True)
          (1): Linear(in_features=128, out_features=128, bias=True)
        )
      )
      (f_node): MLP(
        (activation): ReLU()
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=64, bias=True)
        )
      )
      (GAT_1): GATConv(64, 64, heads=1)
      (relu): ReLU()
      (bn_1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (GAT_2): GATConv(64, 64, heads=1)
      (bn_2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (dense_GCN): DenseSAGEConv(64, 64)
    )
    (6): GMNPropagator(
      (distance_metric): CosineSimilarity()
      (softmax): Softmax()
      (f_messasge): MLP(
        (activation): ReLU()
        (layers): ModuleList(
          (0): Linear(in_features=128, out_features=128, bias=True)
          (1): Linear(in_features=128, out_features=128, bias=True)
        )
      )
      (f_node): MLP(
        (activation): ReLU()
        (layers): ModuleList(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): Linear(in_features=256, out_features=64, bias=True)
        )
      )
      (GAT_1): GATConv(64, 64, heads=1)
      (relu): ReLU()
      (bn_1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (GAT_2): GATConv(64, 64, heads=1)
      (bn_2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (dense_GCN): DenseSAGEConv(64, 64)
    )
    (7): GMNAggregator(
      (sigmoid): Sigmoid()
      (weight_func): MLP(
        (activation): ReLU()
        (layers): ModuleList(
          (0): Linear(in_features=64, out_features=64, bias=True)
          (1): Linear(in_features=64, out_features=64, bias=True)
        )
      )
      (gate_func): MLP(
        (activation): ReLU()
        (layers): ModuleList(
          (0): Linear(in_features=64, out_features=64, bias=True)
          (1): Linear(in_features=64, out_features=64, bias=True)
        )
      )
      (mlp_graph): MLP(
        (activation): ReLU()
        (layers): ModuleList(
          (0): Linear(in_features=64, out_features=64, bias=True)
          (1): Linear(in_features=64, out_features=64, bias=True)
        )
      )
    )
    (8): GMNLoss(
      (ds_metric): CosineSimilarity()
      (loss): MSELoss()
    )
  )
  (criterion): MSELoss()
  (GNN_1): NodeEmbedding(
    (conv): GINConv(nn=Sequential(
      (0): Linear(in_features=30, out_features=64, bias=True)
      (1): PReLU(num_parameters=64)
      (2): Linear(in_features=64, out_features=64, bias=True)
    ))
    (act): PReLU(num_parameters=64)
    (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (GNN_2): NodeEmbedding(
    (conv): GINConv(nn=Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): PReLU(num_parameters=32)
      (2): Linear(in_features=32, out_features=32, bias=True)
    ))
    (act): PReLU(num_parameters=32)
    (bn): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (GNN_3): NodeEmbedding(
    (conv): GINConv(nn=Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): PReLU(num_parameters=16)
      (2): Linear(in_features=16, out_features=16, bias=True)
    ))
    (act): PReLU(num_parameters=16)
    (bn): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (ntn_layer): NTN(
    (inneract): ReLU()
  )
  (graph_mlp_layers): ModuleList(
    (0): Linear(in_features=16, out_features=8, bias=False)
    (1): Sigmoid()
    (2): Linear(in_features=8, out_features=4, bias=False)
    (3): Sigmoid()
    (4): Linear(in_features=4, out_features=2, bias=False)
    (5): Sigmoid()
    (6): Linear(in_features=2, out_features=1, bias=False)
  )
)
